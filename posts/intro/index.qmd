---
title: "The Intro and Top Hitters, Batters and Catchers in the Pioneer Baseball League"
author: "Matthew Goodsell"
date: "2023-01-17"
categories: [baseball, sabrmetrics, analysis]
draft: True
---

# How I got here

Chances are you have heard or seen the movie Moneyball. You might have even read the book like I have. If you are are a sports fan and passion for data then you would have enjoyed the movie and been amazed at the use of analytics and more amazed at the push back of it in the movie. For me I know it is easy to wonder why the numbers can be useful unless I look at it through the analytical eyes it requires. Chances are you probably have not heard of the the Idaho Falls Chukars let alone the Pioneer Baseball League. This post is intended to be more of an introduction to my journey and beginnings with the League and exploration of the use of analytics. 

## Background

The Chukars used to be a Minor League affilate with Kansas City Royals until the MLB restructured their minor leagues in 2020 leaving the Chukars and Pioneer League unaffialted becoming independent. This eventually opened the door for me two years later, which I will get too. This evenutally lead to the Pioneer League becoming an Independent League and an Offical Partner League to the MLB. Once the affilation with the Royals ended then they left Trackman in the Ballpark. Covid resulted in a no games played in 2020...quite the year for them. Through reaching out to the Chukars I was able to operate Trackman during the 2022 season and that is where my story begins with the League. 


A little more on the Chukars, they play at Melaleuca Field in Idaho Falls. If you are ever, a game is worth attending on a nice summer evening. Pro tip if you come, don't park to close to the ballpark or else...

![](foul_ball_windshield.JPG)

*Add a picture of the fireworks or a video* 

More about the data coming from Trackman. Trackman is actually in all the MLB ballparks and a main source of teams data. The v3 version I got the chance to operate returns 167 different variables on batters, pitchers and catchers. Here is a snipbit of some of the variables: 

```{r}
# show only some columns 
library(tidyverse) 

all_games <- read_csv('https://github.com/magoodsell/Chukars/blob/main/data_files/game_data_files/unverified_all_games.csv')

all_games %>% head(5)
```

each row is a play in the game with the associated categorical information and numerical. As a trackman operator you are responsbile making sure, before the game starts, that the roster is inputted properly. Then as the game is happening you are responsible for tagging each play with the appropriate categorical data so it is associated with its numerical data that trackman gets. This tagging process are from columns inning to notes. 

# League needs

With only five of the ten teams in the League having trackman in the stadium and operating it and attending every game, I became curious how the league was using the data. Much of my focus has been on how the League can use the data rather than how the Chukars or an individual team can use it be of benefit to them. I came to understand firsthand the divide in baseball that is shown in Moneyball between those who accept advanced analytics and those who are more "old School" and trust there eyes to evaluate the play on the field. So this and the way I think influenced my perspective on how to use the data to benefit the league and its players and umpires. 

During one home stand early on in the season I had the privilege of talking with an MLB scout who eventually shared with me some key Trackman Metrics teams look at. While I throughly enjoyed that conversation I can't remember to much of the detail and won't get into it here as it is not extremely relavant. 

As I thought about the league and the data and from conversations with my professor, I found out who the league executives I should email were and did so. This lead to a great meeting which subsequently lead to other meetings and being asked to the be the Chair of the Data Analytics working group or committee during the offseason. 

Some cement I get from around the league is the desire for umpire evaluations among others. 

# My Analysis

To find out who the better Pitchers, Batters, and Catchers are around the league, I took the metrics the scout gave me and decide to create a ranking summation to determine which ones were the best overall players for their respective positions. I know there are more metrics and more advanced ways to doing something like this, but I needed something fast and something simple.

The following metrics and formula's are:

## Pitcher Metrics

$$
\text{Ground Ball %} = \frac{Ground Balls} {Pitches Hit In Play}
$$
- A higher GB % is desired since it is expected to result in outs.

```{r}
total_gb <- all_games %>% 
  group_by(Pitcher) %>% 
  filter(TaggedHitType == "GroundBall") %>%
  count() %>% 
  rename(total_gb = n)

all_pitcher_gb_perc <- total_gb %>% 
  left_join(total_inplay, by = c('Pitcher'='Pitcher')) %>% 
  arrange(desc(total_inplay)) %>% 
  mutate(gb_perc = round((total_gb / total_inplay) * 100, 2)) %>% 
  filter(total_inplay > 30)
```

$$
\text{Fly Ball %} = \frac{Fly Balls} {Pitches Hit In Play}
$$
- A lower FB % is desired as. 

```{r}
total_fb <- all_games %>% 
  group_by(Pitcher) %>% 
  filter(TaggedHitType == "FlyBall") %>% 
  count() %>% 
  rename(total_fb = n)

all_pitcher_fb_perc <- total_fb %>% 
  left_join(total_inplay, by = c('Pitcher'='Pitcher')) %>% 
  arrange(desc(total_inplay)) %>% 
  mutate(fb_perc = round((total_fb / total_inplay) * 100, 2)) %>% 
  filter(total_inplay > 30)
```

$$
\text{1st Pitch Strike %} = \frac{1st Called Strike}{Total 1st Pitches}
$$
- A Higher 1 pitch strike % is desired and shows the control a pitcher has. 

```{r}
total_first_pitch <- all_games %>% 
  filter(Balls == 0 & Strikes == 0) %>% 
  group_by(Pitcher) %>% 
  count() %>% 
  rename(first_pitch_count = n)

total_first_pitch_strike <- all_games %>% 
  filter(Balls == 0 & Strikes == 0) %>% 
  filter(PitchCall %in% c("StrikeCalled", "StrikeSwinging")) %>% 
  group_by(Pitcher) %>% 
  count() %>% 
  rename(strike = n)

all_pitcher_first_pitch <- total_first_pitch %>% 
  left_join(total_first_pitch_strike, by = c('Pitcher' = 'Pitcher')) %>% 
  arrange(desc(first_pitch_count)) %>% 
  filter(first_pitch_count > 30) %>% 
  mutate(first_pitch_strike_perc = round(strike/first_pitch_count,4)*100) %>% 
  .[,c(1,3,2,4)] # reordering columns 
```

$$
\text{KZone %} = \frac{Total In Play OR Inside Strike Zone}{Total Pitches}
$$
- This metric shows the overall control the pitchers has over his pitches and ability to hit the specific spot. 

```{r}
total_pitch_count <- all_games %>% 
  group_by(Pitcher) %>% 
  count() %>% 
  rename(total_pitches = n)


kzone_count <- all_games %>% 
  filter(PlateLocSide >= -0.75 & PlateLocSide <= 0.75 
         & PlateLocHeight >= 1.65 & PlateLocHeight <= 3.65 | PitchCall == 'InPlay') %>% 
  group_by(Pitcher) %>% 
  count() %>% 
  rename(total_kzone = n)

# combine and get percent
all_pitcher_kzone <- total_pitch_count %>% 
  left_join(kzone_count, by = c('Pitcher'='Pitcher')) %>% 
  arrange(desc(total_pitches)) %>% 
  filter(total_pitches > 30) %>% 
  .[,c(1,3,2)] %>% 
  mutate(kzone_perc = round(total_kzone/total_pitches, 4)*100)
```

$$
\text{Chase Against %} = \frac{Strike Swinging}{Total Out of Zone}
$$
- Chase against % is not a direct correlation to the movement of a pitch but does the deceptiveness in a pitchers pitch.

```{r}
total_out_zone <- all_games %>%
  filter(InZone == FALSE) %>% 
  group_by(Pitcher) %>% 
  count() %>% 
  rename(total_out_zone = n)

total_chase <- all_games %>% 
  filter(InZone == FALSE & PitchCall == 'StrikeSwinging') %>% 
  group_by(Pitcher) %>% 
  count() %>% 
  rename(total_chase_count = n) %>% 
  filter(total_chase_count != is.na(total_chase_count)) 

all_pitcher_chase_against <- total_out_zone %>% 
  left_join(total_chase, by = c('Pitcher'='Pitcher')) %>% 
  arrange(desc(total_out_zone)) %>% 
  filter(total_out_zone > 30) %>% 
  .[,c(1,3,2)] %>% 
  mutate(chase_against_perc = round(total_chase_count/total_out_zone, 4)*100) %>% 
  filter(chase_against_perc != is.na(chase_against_perc))
```

Along with: 
- exit velo against

```{r}
pitcher_exit_speed_avg <- all_games %>% 
  filter(PitchCall == "InPlay") %>% 
  filter(ExitSpeed != is.na(ExitSpeed)) %>% 
  group_by(Pitcher) %>% 
  summarise(avg_exit_speed =  round(mean(ExitSpeed), 2))

all_pitcher_exit_velo <- pitcher_exit_speed_avg %>% 
  left_join(total_inplay, by = c('Pitcher'='Pitcher')) %>% 
  arrange(desc(total_inplay)) %>% 
  filter(total_inplay > 30)
```

- vertical launch angle against

```{r}
pitcher_avg_exit_angle <- all_games %>% 
  filter(PitchCall == "InPlay") %>% 
  filter(Angle != is.na(Angle)) %>% 
  group_by(Pitcher) %>% 
  summarize(avg_angle = round(mean(Angle), 2))

all_pitcher_angle <- pitcher_avg_exit_angle %>% 
  left_join(total_inplay, by = c('Pitcher'='Pitcher')) %>% 
  arrange(desc(total_inplay)) %>% 
  filter(total_inplay > 30) 
```

Which I decide to omit a formula since these are just averages. 

## Batter Metrics 

- Average Vertical Launch Angle
```{r}
all_batters_vert_avg <- all_games %>% 
  filter(PitchCall == "InPlay" & Angle != is.na(Angle)) %>% 
  group_by(Batter) %>% 
  summarize(avg_vert_angle = round(mean(Angle), 1))

all_batters_inplay <- all_games %>% 
  filter(PitchCall == "InPlay" & Angle != is.na(Angle)) %>% 
  group_by(Batter) %>% 
  count() %>% 
  rename('Count' = n) %>% 
  filter(Count > 30)

# joining datasets
batter_vert_angle <- all_batters_inplay %>% 
  inner_join(all_batters_vert_avg, by = c('Batter'='Batter')) %>% 
  arrange(desc(Count))
```
- Max Exit Velo
```{r}
max_velo <- all_games %>% 
  filter(ExitSpeed != is.na(ExitSpeed)) %>% 
  group_by(Batter) %>% 
  summarize(max_ev = round(max(ExitSpeed),1))
```
- Percent of Batted Balls over 95 mph
```{r}
bb_count <- all_games %>% 
  filter(PitchCall == "InPlay") %>% 
  group_by(Batter) %>% 
  count() %>% 
  rename(total_inplay = n) %>% 
  filter(total_inplay > 30)

# Batters total < 95 mph
bb_95_plus_count <- all_games %>% 
  filter(PitchCall == "InPlay" & ExitSpeed >= 95) %>% 
  group_by(Batter) %>% 
  count() %>% 
  rename(total_95_plus = n)

# Batters percent
all_bb_95_plus <- bb_95_plus_count %>% 
  inner_join(bb_count, by = c('Batter'='Batter')) %>% 
  mutate(bb_plus95_perc = round((total_95_plus/total_inplay) * 100, 1)) %>% 
  arrange(desc(total_inplay))
```
- Percent of Batted Balls over 105 mph
```{r}
bb_105_plus_count <- all_games %>% 
  filter(PitchCall == "InPlay" & ExitSpeed >= 105) %>% 
  group_by(Batter) %>% 
  count() %>% 
  rename(total_105_plus = n)

# Batters percent
all_bb_105_plus <- bb_105_plus_count %>% 
  inner_join(bb_count, by = c('Batter'='Batter')) %>% 
  mutate(bb_plus105_perc = round((total_105_plus/total_inplay) * 100, 1)) %>% 
  arrange(desc(total_inplay))
```

This might seem redundant and I was told by a League Executive who had conversations that this one was not something they really cared about and percent of Batted Balls over 95 mph was more important.

- Chase Average

Also know as whiff rate, is understood as the number of times a batter has strike swinging regardless of it the pitch was inside or outside of the zone.
```{r}
total_out_of_zone <- all_games %>% 
  filter(InZone == FALSE) %>% 
  group_by(Batter) %>% 
  count() %>% 
  rename(OutOfZone = n)

total_out_of_zone_ss <- all_games %>% 
  filter(InZone == FALSE & PitchCall == "StrikeSwinging") %>% 
  group_by(Batter) %>% 
  count() %>% 
  rename(ss_OutOfZone = n)

# combining datasets
all_chase_perc <- total_out_of_zone %>% 
  left_join(total_out_of_zone_ss, by = c('Batter'='Batter')) %>% 
  .[,c(1,3,2)]

all_chase_perc[is.na(all_chase_perc)] <- 0 

all_chase_perc <- all_chase_perc %>% 
  mutate(chase_perc = round((ss_OutOfZone/OutOfZone) * 100, 1))

all_chase_perc <- all_chase_perc %>% 
  filter(OutOfZone > 30)
```

- Miss percentage 
```{r}
# Denominator - total pitches Swung at
pitches_swung <- all_games %>% 
  filter(PitchCall %in% c("StrikeSwinging", "FoulBall", "InPlay")) %>% 
  group_by(Batter) %>% 
  count() %>% 
  rename(swung_at_count = n)

# Numerator - total Missed
pitches_missed <- all_games %>% 
  filter(PitchCall == "StrikeSwinging") %>% 
  group_by(Batter) %>% 
  count() %>% 
  rename(missed_count = n)

# Join both Datasets
all_miss_perc <- pitches_missed %>% 
  right_join(pitches_swung, by = c('Batter'='Batter')) 

all_miss_perc[is.na(all_miss_perc)] <- 0

all_miss_perc <- all_miss_perc %>% 
  mutate(miss_perc = round((missed_count / swung_at_count)*100, 1)) 

all_miss_perc <- all_miss_perc %>% 
  filter(swung_at_count > 30) 
```

- InZone Miss percentage
```{r}
# filtering to in zone dataset
in_zone <- all_games %>% 
  filter(InZone == TRUE) 

# Denominator - total pitches Swung at
iz_pitches_swung <- in_zone %>% 
  filter(PitchCall %in% c("StrikeSwinging", "FoulBall", "InPlay")) %>% 
  group_by(Batter) %>% 
  count() %>% 
  rename(iz_swung_count = n)

# Numerator - total swung at
iz_pitches_missed <- in_zone %>% 
  filter(PitchCall == 'StrikeSwinging') %>% 
  group_by(Batter) %>% 
  count() %>% 
  rename(iz_miss_count = n)

# Join datasets together
all_InZone_perc <- iz_pitches_missed %>% 
  right_join(iz_pitches_swung, by=c('Batter'='Batter'))

all_InZone_perc[is.na(all_InZone_perc)] <- 0

all_InZone_perc <- all_InZone_perc %>% 
  mutate(InZone_miss_perc = round( (iz_miss_count / iz_swung_count) *100, 1))

all_InZone_perc <- all_InZone_perc %>% 
  filter(iz_swung_count > 30)
```


## Catcher Metrics 

- Pop Time
MLB Definition - “represents the time elapsed from the moment the pitch hits the catcher’s mitt to the moment the intended fielder is projected to receive his throw at the center of the base.” (https://www.mlb.com/glossary/statcast/pop-time)

```{r}
# Pop time 
poptime_count <- all_games %>% 
  filter(PopTime != is.na(PopTime)) %>% 
  group_by(Catcher) %>% 
  count() %>% 
  rename(Count = n)

poptime_avg <- all_games %>% 
  filter(PopTime != is.na(PopTime)) %>% 
  group_by(Catcher) %>% 
  summarize(avg_poptime = round(mean(PopTime), 1))

# join datasets
all_poptime <- poptime_count %>% 
  left_join(poptime_avg, by=c('Catcher'='Catcher'))
```

- Throw Speed
Trackman Definition - “Speed at release of throw from catcher” 

```{r}
throwspeed_count <- all_games %>% 
  filter(ThrowSpeed != is.na(ThrowSpeed)) %>% 
  group_by(Catcher) %>% 
  count() %>% 
  rename(Count = n)

throwspeed_avg <- all_games %>% 
  filter(ThrowSpeed != is.na(ThrowSpeed)) %>% 
  group_by(Catcher) %>% 
  summarize(avg_throwspeed = round(mean(ThrowSpeed), 1))


# join datasets
all_throwspeed <- throwspeed_count %>% 
  left_join(throwspeed_avg, by = c('Catcher'='Catcher'))
```

The scout did talk about catcher framing and its increase in popularity, but I have not had the time to think through how I want to calculate it or research how it is calculated (which will probably just be number of pitches outside zone called for strike within a certain range) and I know you can visualize it as well, I just haven't taken the time to do so. 

- thought process ranking summation
As I noted most of these metrics it is easy to see that by ordering the values for each player in descending order or ascending order you can then assign a rank to them.  I combined all values and then ordered them to see who had the lowest score indicating that this player is the better overall pitcher in these metrics. The results can be seen below:

### Best Pitchers
Show a table with all values and then total value rather than my bar chart. 

Here is a visual depicating the top Pitchers. (I know getting team information is benefical, but is a little complex with the wrangling)

![](player rankings-2.png)
As we can see 

### Best Batters 

![](batting player rankings-2.png)

### Best Catcher

![](catcher rankings-2.png) 

# What is next?

With next season starting at the end of May and as the Chair of the Data Analytics committee I have been thinking about the best things to do that will benefit the league in the future. As I have gathered the information I can I know that the following projects are what will help benefit the league this upcoming season: 
- A File Transfer Protocol (FTP) script to automate the gathering all the trackman data
- a web scrapping script to get Umpire information per game
- a web application to evaluate Umpire performance and I plan on starting a pitch classification model
- I know the former might be more complex, but I will see where I get. 

 